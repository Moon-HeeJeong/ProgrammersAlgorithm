//:> 2022 KAKAO TECH INTERNSHIP Îëê ÌÅê Ìï© Í∞ôÍ≤å ÎßåÎì§Í∏∞
/*:>
 Lv.2
 */

import Foundation

//: üå±solutionA (53.3)
//53.3Ìçº Ïò§Îãµ, ÏãúÍ∞ÑÏ¥àÍ≥º
//queueSum double Ï≤òÎ¶¨ => ÎòëÍ∞ôÏù¥ 53.3%...
func solutionA(_ queue1:[Int], _ queue2:[Int]) -> Int {
   
    var queue1 = queue1
    var queue2 = queue2
    
    let queueSum = Double(queue1.reduce(0, +) + queue2.reduce(0, +))/Double(2.0)
    let totalQueueCnt = queue1.count + queue2.count
    var workCnt = 0
    
    print("queueSum \(queueSum)")
    
    while Double(queue1.reduce(0, +)) != queueSum{
        if queue1.reduce(0, +) > queue2.reduce(0, +){ //queue1 Ï¥ùÌï©Ïù¥ Îçî ÌÅ¨Î©¥ 1 Í∞íÏùÑ 2 Î°ú Î≥¥ÎÇ¥Í∏∞
           
            let tempValue = queue1.first!
            queue1.removeFirst()
            queue2.insert(tempValue, at: queue2.count)
            
        }else{
            let tempValue = queue2.first!
            queue2.removeFirst()
            queue1.insert(tempValue, at: queue1.count)
        }
        
        
        workCnt += 1
        
        print("Q1 : \(queue1) Q2 : \(queue2) workCnt \(workCnt)")
//        if i == queueCnt-1 && queue1.reduce(0, +) != queueSum{
//                workCnt = -1
//        }
        
        if workCnt == totalQueueCnt{
            workCnt = -1
            break
        }
    }
    
    return workCnt
}

//print(solutionA([3, 2, 7, 2], [4, 6, 5, 1]))
//print(solutionA([1, 2, 1, 2], [1, 10, 1, 2]))
//print(solutionA([1, 1], [1, 5]))
//print(solutionA([1, 4], [4, 8]))

//: üå±solutionB (86.7%) -> (100%)
//Î∞∞Ïó¥Ïùò Ìï©ÏùÑ Íµ¨Ìï† Îïå reduce ÎåÄÏã† oneSum, twoSum ÏúºÎ°ú (ÏãúÍ∞ÑÏ¥àÍ≥º Ï§ÑÏûÑ)
//ÌÖåÏä§Ìä∏ 1 „Äâ    Ïã§Ìå® (0.09ms, 16.3MB)  -> while Î¨∏ÏùÑ totalQueueCnt ÎßåÌÅºÏù¥ ÏïÑÎãàÎùº totalQueueCnt*2 ÎßåÌÅº ÎèåÎ†§ÏÑú Ìï¥Í≤∞, ÎèåÎ¶¨Îäî ÌöüÏàòÏóê Ïó¨Ïú†Î•º Ï§å
//ÏãúÍ∞ÑÏ¥àÍ≥ºÎäî queue Î≥µÏ†úÌïòÎäî Í≤ÉÏùÑ ÏàòÏ†ïÌïòÏó¨ Ìï¥Í≤∞
func solutionB(_ queue1:[Int], _ queue2:[Int]) -> Int {
   
    /**
     var queue1 = queue1 ÏúºÎ°ú ÌïòÎ©¥ ÍπäÏùÄ Î≥µÏÇ¨
     var queue1 = queue1[0..<queue1.count] Î°ú ÌïòÎ©¥ Ï£ºÏÜåÎ•º Î≥µÏÇ¨Ìï® (ÏãúÍ∞Ñ Ï§ÑÏù¥Í∏∞~)
     **/
    var queue1 = queue1[0..<queue1.count]
    var queue2 = queue2[0..<queue2.count]
    
    var oneSum = queue1.reduce(0, +)
    var twoSum = queue2.reduce(0, +)
    
    let queueSum = Double(oneSum + twoSum)/Double(2.0)
    let totalQueueCnt = queue1.count + queue2.count
    var workCnt = 0
    
    
    
    print("queue1 \(queue1) queue2 \(queue2) queueSum \(queueSum)")
    
    while Double(oneSum) != queueSum{
        if oneSum > twoSum{ //queue1 Ï¥ùÌï©Ïù¥ Îçî ÌÅ¨Î©¥ 1 Í∞íÏùÑ 2 Î°ú Î≥¥ÎÇ¥Í∏∞
           
            let tempValue = queue1.first!
            queue1.removeFirst()
            queue2.append(tempValue)
            oneSum -= tempValue
            twoSum += tempValue
            
        }else{
            let tempValue = queue2.first!
            queue2.removeFirst()
            queue1.append(tempValue)
            oneSum += tempValue
            twoSum -= tempValue
        }
        
        
        workCnt += 1
        
        print("Q1 : \(queue1) Q2 : \(queue2) workCnt \(workCnt)")
        
        if workCnt == totalQueueCnt*2{
            workCnt = -1
            break
        }
    }
    
    return workCnt
}

//print(solutionB([3, 2, 7, 2], [4, 6, 5, 1]))
//print(solutionB([1, 2, 1, 2], [1, 10, 1, 2]))
//print(solutionB([1, 1], [1, 5]))
//print(solutionB([1, 4], [4, 8]))
print(solutionB([1,1,1,1,1],[1,1,1,9,1]))

